{"ast":null,"code":"var _jsxFileName = \"/Users/azharsaeed/Desktop/untitled folder/stripeprectise/client/src/StripeContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; // MUI Components\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField'; // stripe\n\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js'; // Util imports\n\nimport { makeStyles } from '@material-ui/core/styles'; // Custom Components\n\nimport PaymentForm from './PaymentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HomePage() {\n  _s();\n\n  const classes = useStyles(); // State\n\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const res = await axios.post('http://localhost:5000/pay', {\n      email: email\n    });\n    const clientSecret = res.data['client_secret'];\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!'); // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      className: classes.content,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Email\",\n        id: \"outlined-email-input\",\n        helperText: `Email you'll recive updates and receipts on`,\n        margin: \"normal\",\n        variant: \"outlined\",\n        type: \"email\",\n        required: true,\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(PaymentForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.div,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.button,\n          onClick: handleSubmit,\n          children: \"Pay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.button,\n          children: \"Subscription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 6\n  }, this);\n}\n\n_s(HomePage, \"+1QP9gyRLhPcy9WS6AY1xzDMBKo=\", false, function () {\n  return [useStyles, useStripe, useElements];\n});\n\n_c = HomePage;\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 500,\n    margin: '35vh auto'\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignContent: 'flex-start'\n  },\n  div: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignContent: 'flex-start',\n    justifyContent: 'space-between'\n  },\n  button: {\n    margin: '2em auto 1em'\n  }\n});\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/azharsaeed/Desktop/untitled folder/stripeprectise/client/src/StripeContainer.js"],"names":["React","useState","axios","Button","Card","CardContent","TextField","useStripe","useElements","CardElement","makeStyles","PaymentForm","HomePage","classes","useStyles","email","setEmail","stripe","elements","handleSubmit","event","res","post","clientSecret","data","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","console","log","message","paymentIntent","status","root","content","e","target","value","div","button","maxWidth","margin","display","flexDirection","alignContent","justifyContent"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\timport axios from 'axios';\n\t// MUI Components\n\timport Button from '@material-ui/core/Button';\n\timport Card from '@material-ui/core/Card';\n\timport CardContent from '@material-ui/core/CardContent';\n\timport TextField from '@material-ui/core/TextField';\n\t// stripe\n\timport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n\t// Util imports\n\timport {makeStyles} from '@material-ui/core/styles';\n\t// Custom Components\n\timport PaymentForm from './PaymentForm';\n\t\n\t\n\t\n\tfunction HomePage() {\n\t  const classes = useStyles();\n\t  // State\n\t  const [email, setEmail] = useState('');\n\t\n\t  const stripe = useStripe();\n\t  const elements = useElements();\n\t\n\t  const handleSubmit = async (event) => {\n\t    if (!stripe || !elements) {\n\t      // Stripe.js has not yet loaded.\n\t      // Make sure to disable form submission until Stripe.js has loaded.\n\t      return;\n\t    }\n\t\n\t    const res = await axios.post('http://localhost:5000/pay', {email: email});\n\t\n\t    const clientSecret = res.data['client_secret'];\n\t\n\t    const result = await stripe.confirmCardPayment(clientSecret, {\n\t      payment_method: {\n\t        card: elements.getElement(CardElement),\n\t        billing_details: {\n\t          email: email,\n\t        },\n\t      },\n\t    });\n\t\n\t    if (result.error) {\n\t      // Show error to your customer (e.g., insufficient funds)\n\t      console.log(result.error.message);\n\t    } else {\n\t      // The payment has been processed!\n\t      if (result.paymentIntent.status === 'succeeded') {\n\t        console.log('Money is in the bank!');\n\t        // Show a success message to your customer\n\t        // There's a risk of the customer closing the window before callback\n\t        // execution. Set up a webhook or plugin to listen for the\n\t        // payment_intent.succeeded event that handles any business critical\n\t        // post-payment actions.\n\t      }\n\t    }\n\t  };\n\t\n\t  return (\n\t    <Card className={classes.root}>\n\t      <CardContent className={classes.content}>\n\t        <TextField\n\t          label='Email'\n\t          id='outlined-email-input'\n\t          helperText={`Email you'll recive updates and receipts on`}\n\t          margin='normal'\n\t          variant='outlined'\n\t          type='email'\n\t          required\n\t          value={email}\n\t          onChange={(e) => setEmail(e.target.value)}\n\t          fullWidth\n\t        />\n\t        <PaymentForm />\n\t        <div className={classes.div}>\n\t          <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleSubmit}>\n\t            Pay\n\t          </Button>\n\t          <Button variant=\"contained\" color=\"primary\" className={classes.button}>\n\t            Subscription\n\t          </Button>\n\t        </div>\n\t      </CardContent>\n\t    </Card>\n\t  );\n\t}\n\n\n\n\tconst useStyles = makeStyles({\n\t\troot: {\n\t\t  maxWidth: 500,\n\t\t  margin: '35vh auto',\n\t\t},\n\t\tcontent: {\n\t\t  display: 'flex',\n\t\t  flexDirection: 'column',\n\t\t  alignContent: 'flex-start',\n\t\t},\n\t\tdiv: {\n\t\t  display: 'flex',\n\t\t  flexDirection: 'row',\n\t\t  alignContent: 'flex-start',\n\t\t  justifyContent: 'space-between',\n\t\t},\n\t\tbutton: {\n\t\t  margin: '2em auto 1em',\n\t\t},\n\t  });\n\n\t\n\texport default HomePage;"]},"metadata":{},"sourceType":"module"}